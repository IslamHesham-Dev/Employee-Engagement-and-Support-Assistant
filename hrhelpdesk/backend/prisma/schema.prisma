// HRHelpDesk Database Schema
// Generated for iScore Employee Engagement & Support Assistant

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  employeeId  String   @unique
  firstName   String
  lastName    String
  password    String
  role        UserRole @default(EMPLOYEE)
  status      UserStatus @default(ACTIVE)
  language    Language @default(ENGLISH)
  avatar      String?
  phone       String?
  position    String?
  startDate   DateTime?
  lastLogin   DateTime?
  
  // Relations
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  managerId    String?
  manager      User?       @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates User[]      @relation("EmployeeManager")
  
  // Activity Relations
  surveyResponses     SurveyResponse[]
  conversations       Conversation[]
  messages           Message[]
  feedbackSubmissions Feedback[]
  createdSurveys     Survey[]
  auditLogs          AuditLog[]
  notifications      Notification[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

model Department {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  code        String @unique
  
  // Relations
  users         User[]
  surveys       Survey[]
  analytics     Analytics[]
  notifications Notification[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("departments")
}

enum UserRole {
  HR
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum Language {
  ENGLISH
  ARABIC
}

// ============================================================================
// SURVEY MANAGEMENT
// ============================================================================

model Survey {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      SurveyStatus @default(DRAFT)
  isAnonymous Boolean     @default(false)
  startDate   DateTime?
  endDate     DateTime?
  
  // Settings
  allowMultipleResponses Boolean @default(false)
  showProgressBar       Boolean @default(true)
  randomizeQuestions    Boolean @default(false)
  
  // Targeting
  targetAllEmployees Boolean @default(true)
  targetDepartments  String[] // Array of department IDs
  targetUsers        String[] // Array of user IDs
  
  // Relations
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  questions SurveyQuestion[]
  responses SurveyResponse[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("surveys")
}

model SurveyQuestion {
  id       String       @id @default(cuid())
  text     String
  type     QuestionType
  required Boolean      @default(false)
  order    Int
  
  // Question-specific settings
  options  String[] // For multiple choice questions
  minValue Int?     // For rating scales
  maxValue Int?     // For rating scales
  
  // Conditional logic
  dependsOnQuestionId String?
  dependsOnQuestion   SurveyQuestion? @relation("QuestionDependency", fields: [dependsOnQuestionId], references: [id])
  dependentQuestions  SurveyQuestion[] @relation("QuestionDependency")
  dependsOnValue      String?
  
  // Relations
  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  
  responses QuestionResponse[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("survey_questions")
}

model SurveyResponse {
  id         String   @id @default(cuid())
  isComplete Boolean  @default(false)
  ipAddress  String?
  userAgent  String?
  
  // Relations
  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  responses QuestionResponse[]
  
  // Timestamps
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("survey_responses")
}

model QuestionResponse {
  id     String @id @default(cuid())
  value  String
  
  // Relations
  questionId String
  question   SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  responseId String
  response   SurveyResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([questionId, responseId])
  @@map("question_responses")
}

enum SurveyStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum QuestionType {
  TEXT
  TEXTAREA
  MULTIPLE_CHOICE
  CHECKBOX
  RATING_SCALE
  YES_NO
  DATE
  NUMBER
}

// ============================================================================
// CHATBOT & CONVERSATIONS (for future AI integration)
// ============================================================================

model Conversation {
  id        String            @id @default(cuid())
  title     String?
  status    ConversationStatus @default(ACTIVE)
  language  Language          @default(ENGLISH)
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  messages Message[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("conversations")
}

model Message {
  id       String      @id @default(cuid())
  content  String
  role     MessageRole
  metadata Json?       // Store additional AI metadata
  
  // AI-specific fields (for future use)
  intent          String?
  confidence      Float?
  sentimentScore  Float?
  sentimentLabel  String?
  responseTime    Int?    // Response time in milliseconds
  
  // Relations
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("messages")
}

enum ConversationStatus {
  ACTIVE
  RESOLVED
  ESCALATED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// ============================================================================
// KNOWLEDGE BASE (for future AI integration)
// ============================================================================

model Document {
  id          String         @id @default(cuid())
  title       String
  content     String
  type        DocumentType
  category    String
  tags        String[]
  language    Language       @default(ENGLISH)
  status      DocumentStatus @default(ACTIVE)
  version     Int            @default(1)
  
  // File information
  filename    String?
  mimeType    String?
  fileSize    Int?
  checksum    String?
  
  // Metadata
  metadata    Json?
  
  // Vector embeddings (for future AI use)
  embeddingId String? @unique
  
  // Relations
  parentId String?
  parent   Document? @relation("DocumentVersion", fields: [parentId], references: [id])
  versions Document[] @relation("DocumentVersion")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?
  
  @@map("documents")
}

enum DocumentType {
  POLICY
  PROCEDURE
  FAQ
  HANDBOOK
  FORM
  ANNOUNCEMENT
  OTHER
}

enum DocumentStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  EXPIRED
}

// ============================================================================
// FEEDBACK & COMMUNICATION
// ============================================================================

model Feedback {
  id          String         @id @default(cuid())
  title       String
  description String
  category    FeedbackCategory
  priority    Priority       @default(MEDIUM)
  status      FeedbackStatus @default(SUBMITTED)
  isAnonymous Boolean        @default(false)
  
  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resolvedAt DateTime?
  
  @@map("feedback")
}

enum FeedbackCategory {
  WORKPLACE
  MANAGEMENT
  POLICIES
  BENEFITS
  TECHNOLOGY
  TRAINING
  OTHER
}

enum FeedbackStatus {
  SUBMITTED
  IN_REVIEW
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

model Analytics {
  id     String        @id @default(cuid())
  type   AnalyticsType
  period String        // e.g., "2024-01", "2024-01-15"
  data   Json          // Flexible storage for various metrics
  
  // Relations
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([type, period, departmentId])
  @@map("analytics")
}

enum AnalyticsType {
  ENGAGEMENT_SCORE
  SURVEY_PARTICIPATION
  CHATBOT_USAGE
  SENTIMENT_TRENDS
  RESPONSE_RATES
  TOP_QUERIES
  USER_ACTIVITY
}

// ============================================================================
// SYSTEM & AUDIT
// ============================================================================

model AuditLog {
  id       String    @id @default(cuid())
  action   String
  entity   String
  entityId String
  oldData  Json?
  newData  Json?
  
  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  // Additional context
  ipAddress String?
  userAgent String?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_config")
}

// ============================================================================
// NOTIFICATIONS & EMAIL
// ============================================================================

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType
  status  NotificationStatus @default(PENDING)
  
  // Targeting
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  // Scheduling
  scheduledFor DateTime?
  sentAt       DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notifications")
}

model EmailLog {
  id        String   @id @default(cuid())
  type      String   // 'survey_invitation', 'reminder', 'response_alert'
  userId    String?
  relatedId String?  // Survey ID, Feedback ID, etc.
  email     String
  status    EmailStatus @default(SENT)
  sentAt    DateTime @default(now())
  openedAt  DateTime?
  clickedAt DateTime?
  metadata  Json?    // Store additional data like SendGrid response, errors, etc.
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("email_logs")
}

enum NotificationType {
  SURVEY_INVITATION
  SURVEY_REMINDER
  SYSTEM_UPDATE
  POLICY_UPDATE
  GENERAL
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}
